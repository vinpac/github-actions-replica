#
# User-defined substitutions:
#   _CLOUDSDK_COMPUTE_ZONE
#   _CLOUDSDK_CONTAINER_CLUSTER
#   _GITHUB_USERNAME
#   _KMS_KEY
#   _KMS_KEYRING
#   _REPO
#   _DEPLOYMENT_FILE
#

steps:
  # Build the astroturf container image.
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/astroturf:${COMMIT_SHA}'
      - '.'
  # Generate a kubeconfig file
  - name: 'gcr.io/cloud-builders/gcloud'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
      - 'KUBECONFIG=/config/kube'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        CLUSTER=$$(gcloud config get-value container/cluster)
        PROJECT=$$(gcloud config get-value core/project)
        ZONE=$$(gcloud config get-value compute/zone)

        gcloud container clusters get-credentials "$${CLUSTER}" \
          --project "$${PROJECT}" \
          --zone "$${ZONE}"
    volumes:
      - name: 'config'
        path: /config

  # Retrieve and decrypt the GitHub Hub configuration.
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        gsutil cp gs://${PROJECT_ID}-pipeline-configs/hub.enc hub.enc
        gcloud kms decrypt \
          --ciphertext-file=hub.enc \
          --plaintext-file=/config/hub \
          --location=global \
          --keyring=${_KMS_KEYRING} \
          --key=${_KMS_KEY}
    volumes:
      - name: 'config'
        path: /config

  # Create a pull request on the ${_GITHUB_USERNAME}/${_REPO} repo
  # to update the astroturf deployment configuration.
  - name: 'gcr.io/hightowerlabs/hub'
    env:
      - 'HUB_CONFIG=/config/hub'
      - 'KUBECONFIG=/config/kube'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        CONTAINER_IMAGE="gcr.io/${PROJECT_ID}/astroturf:${COMMIT_SHA}"
        # Extract the container image from the qa astroturf deployment configuration file.
        ACTIVE_ACCOUNT=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")

        hub config --global credential.https://github.com.helper /usr/local/bin/hub-credential-helper
        hub config --global hub.protocol https
        hub config --global user.email "$${ACTIVE_ACCOUNT}"
        hub config --global user.name "Google Container Builder"

        # Clone the ${_GITHUB_USERNAME}/${_REPO} repo
        # and patch the astroturf deployment container image.
        hub clone "https://github.com/${_GITHUB_USERNAME}/${_REPO}.git"

        # Create deployment folder if needed
        mkdir -p "$(_DEPLOYMENT_FILE/*)"
        cat <<EOF > patch.yaml
        spec:
          template:
            spec:
              containers:
                - name: astroturf
                  image: $${CONTAINER_IMAGE}
        EOF
        kubectl patch --local -o yaml \
          -f ${_REPO}/${_DEPLOYMENT_FILE}.yaml \
          -p "$(cat patch.yaml)" \
          > ${_DEPLOYMENT_FILE}.yaml
        mv ${_DEPLOYMENT_FILE}.yaml ${_REPO}/${_DEPLOYMENT_FILE}.yaml

        # Apply changes
        kubectl apply -f ${_DEPLOYMENT_FILE}.yaml

        # Change to the ${_REPO} directory
        # commit the local changes, then issue a pull request.
        cd ${_REPO}
        git checkout -b update-deployment-${BUILD_ID}
        hub add ${_DEPLOYMENT_FILE}.yaml

        hub commit -F- <<EOF
        Update the astroturf deployment

        This commit updates the astroturf deployment container image to:

            $${CONTAINER_IMAGE}

        Build ID: ${BUILD_ID}
        EOF

        hub push origin update-deployment-${BUILD_ID}

        # Create a pull request to the ${_GITHUB_USERNAME}/${_REPO} repo.
        hub pull-request -F- <<EOF
        Update the astroturf deployment

        This commit updates the astroturf deployment container image to:

            $${CONTAINER_IMAGE}

        Build ID: ${BUILD_ID}
        EOF
    volumes:
      - name: 'config'
        path: /config
images:
  - 'gcr.io/${PROJECT_ID}/astroturf:${COMMIT_SHA}'
