
make-col-offset($size, $columns = $grid-columns)
  margin-left: percentage($size / $columns)

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

make-grid-columns($columns = $grid-columns, $gutter = $grid-gutter-width, $breakpoints = $grid-breakpoints)
  // Common properties for all breakpoints
  $grid-column
    position: relative
    width: 100%
    min-height: 1px // Prevent columns from collapsing when empty
    padding-right: ($gutter / 2)
    padding-left:  ($gutter / 2)

  for $breakpoint in $breakpoints
    $infix = breakpoint-infix($breakpoint, $breakpoints)

    // Allow columns to stretch full width below their breakpoints
    for $i in 1..$columns
      .col{$infix}-{$i}
        @extend $grid-column

    .col{$infix},
    .col{$infix}-auto
      @extend $grid-column

    +media-breakpoint-up($breakpoint, $breakpoints)
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col{$infix}
        flex-basis: 0
        flex-grow: 1
        max-width: 100%

      .col{$infix}-auto
        flex: 0 0 auto
        width: auto
        max-width: none // Reset earlier grid tiers

      for $i in 1..$columns
        .col{$infix}-{$i}
          make-col($i, $columns)

      for $i in 1..$columns
        .order{$infix}-{$i}
          order: $i

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      for $i in 0...$columns
        if not ($infix == "" and $i == 0)// Avoid emitting useless .offset-0
          .offset{$infix}-{$i}
            make-col-offset($i, $columns)

/// Grid system
//
// Generate semantic grid columns with these mixins.

make-container()
  margin-right: auto
  margin-left: auto
  padding-right: ($grid-gutter-width / 2)
  padding-left:  ($grid-gutter-width / 2)


// For each breakpoint, define the maximum width of the container in a media query
make-container-max-widths($max-widths = $container-max-widths, $breakpoints = $grid-breakpoints)
  for $breakpoint, $container-max-width in $max-widths
    +media-breakpoint-up($breakpoint, $breakpoints)
      width: $container-max-width
      max-width: 100%

    &--{$breakpoint}
      max-width: $container-max-width !important


make-container-variants($max-widths = $container-max-widths, $breakpoints = $grid-breakpoints)
  $breakpoint, $container-max-width in $max-widths
    &--{$breakpoint}
      width: $container-max-width
      max-width: 100%

make-row()
  display: flex
  flex-wrap: wrap
  margin-right: ($grid-gutter-width / -2)
  margin-left:  ($grid-gutter-width / -2)

make-col-ready()
  position: relative
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%
  min-height: 1px // Prevent collapsing
  padding-right: ($grid-gutter-width / 2)
  padding-left:  ($grid-gutter-width / 2)

make-col($size, $columns = $grid-columns)
  flex: 0 0 percentage($size / $columns)
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns)

make-hidden-utilities($breakpoints = $grid-breakpoints)
  for $breakpoint in $breakpoints
    +media-breakpoint-up($breakpoint)
      $infix = breakpoint-infix($breakpoint, $grid-breakpoints)

      .d{$infix}-none
        display: none !important

      .d{$infix}-inline
        display: inline !important

      .d{$infix}-inline-block
        display: inline-block !important

      .d{$infix}-block
        display: block !important

      .d{$infix}-flex
        display: flex !important

      .d{$infix}-inline-flex
        display: inline-flex !important
